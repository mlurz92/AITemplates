# Anwendungsbeschreibung: Prompt-Template Browser

## 1. Einleitung

### 1.1. Zweck der Anwendung
Der Prompt-Template Browser ist eine moderne, interaktive Webanwendung, die für die effiziente Verwaltung, Navigation, Nutzung und Anpassung hierarchisch organisierter Textbausteine (Prompts) konzipiert wurde. Die Anwendung lädt diese Daten aus einer lokalen XML-Datei, präsentiert sie in einer ansprechenden, benutzerfreundlichen Oberfläche und bietet die Möglichkeit, Prompts direkt in der Anwendung zu bearbeiten, diese Änderungen lokal im Browser zu speichern und die angepasste Vorlagensammlung herunterzuladen.

### 1.2. Zielgruppe
Die Anwendung richtet sich an Nutzer, die regelmäßig mit vordefinierten Textvorlagen oder Prompts arbeiten und eine schnelle, übersichtliche Methode zum Zugriff, zur Übernahme und zur individuellen Anpassung dieser Texte in andere Anwendungen oder Arbeitsabläufe benötigen. Dies umfasst beispielsweise Content-Ersteller, Entwickler, Support-Mitarbeiter oder jeden, der von einer strukturierten und personalisierbaren Sammlung von Textbausteinen profitiert.

### 1.3. Kernidee und Nutzen
Die Kernidee besteht darin, eine intuitive und ästhetisch ansprechende Plattform für den Zugriff auf und die Bearbeitung einer persönlichen Sammlung von Prompt-Templates zu bieten. Der Hauptnutzen liegt in der deutlichen Zeitersparnis und der verbesserten Organisation durch eine klare Ordnerstruktur, schnelle Navigationsmöglichkeiten, direkte Kopierfunktionen sowie die flexible Anpassbarkeit der Inhalte. Die Anwendung ist für den lokalen Gebrauch optimiert und legt höchsten Wert auf eine exzellente Benutzererfahrung (UI/UX) sowohl auf Desktop-Computern als auch auf mobilen Endgeräten.

## 2. Systemanforderungen
* Ein moderner Webbrowser mit guter Unterstützung für aktuelle Webstandards:
    * HTML5
    * CSS3 (inklusive Flexbox, Grid, CSS Variablen, `backdrop-filter`)
    * JavaScript (ES6+, Fetch API, DOMParser, XMLSerializer, Clipboard API, Fullscreen API, History API, Blob API, URL.createObjectURL)
    * Local Storage API zur Speicherung von bearbeiteten Vorlagen.
* Beispiele für kompatible Browser: Aktuelle Versionen von Google Chrome, Mozilla Firefox, Microsoft Edge, Apple Safari.
* Für die PWA-Funktionalität (Progressive Web App) ist ein Browser erforderlich, der Web App Manifeste unterstützt.

## 3. Datenquelle, -struktur und -persistenz

### 3.1. Daten-Lade-Logik
Die Anwendung folgt einer zweistufigen Ladelogik:
1.  **Prüfung des Local Storage:** Beim Start prüft die Anwendung, ob eine bearbeitete Version der Vorlagen im Local Storage des Browsers gespeichert ist.
2.  **Fallback auf XML-Datei:** Ist kein Eintrag im Local Storage vorhanden, lädt die Anwendung die inhaltliche Struktur dynamisch aus einer lokalen XML-Datei namens `Templates.xml`. Diese Datei muss sich im selben Verzeichnis wie die Hauptanwendungsdatei (`index.html`) befinden.

### 3.2. Aufbau der `Templates.xml`
* **`<ROOT>`-Element:** Das Wurzelelement der XML-Datei.
* **`<TreeViewNode>`-Elemente:** Jeder Eintrag (sowohl Ordner als auch Prompt) wird durch ein `<TreeViewNode>`-Element repräsentiert. Die hierarchische Verschachtelung dieser Elemente definiert die Ordnerstruktur.
    * **`value="Name des Eintrags"`:** Dieses Attribut definiert den Titel, der für den Ordner oder das Prompt auf der jeweiligen Karte angezeigt wird.
    * **`beschreibung="Vollständiger Text des Prompts..."`:** Dieses Attribut enthält den kompletten Text des Prompts. Bei Ordnern ist dieses Attribut leer.
    * **`guid="EINE-GLOBALE-EINZIGARTIGE-ID"`:** Ein global eindeutiger Identifikator (GUID), der für jeden `<TreeViewNode>` vergeben sein muss. Dieses Attribut ist **essenziell** für die korrekte Funktionsweise der Navigation, der Bearbeitungs- und Speicherfunktionen und der internen Zustandsverwaltung.

### 3.3. Datenpersistenz im Local Storage
* **Speichervorgang:** Wenn ein Nutzer einen Prompt-Text im Detail-Modal bearbeitet und speichert, wird der gesamte aktuelle Zustand aller Vorlagen (das komplette XML-Dokument) als Text in den Local Storage des Browsers geschrieben.
* **Aktualisierung:** Jede weitere Speicheraktion überschreibt den vorherigen Eintrag, sodass immer nur die aktuellste Version der Vorlagensammlung gespeichert ist.
* **Sichtbarkeit:** Sobald Änderungen im Local Storage gespeichert sind, erscheint ein Download-Button in der oberen Navigationsleiste.

## 4. Globale UI-Konzepte und Design
Das Erscheinungsbild ist modern, klar und nutzt "Glassmorphism"-Effekte. Es bietet ein umschaltbares Dark- und Light-Theme, dessen Wahl im Local Storage gespeichert wird. Das Layout ist vollständig responsiv und passt sich an alle Bildschirmgrößen an, wobei "Safe Areas" auf mobilen Geräten berücksichtigt werden. Flüssige Animationen und Übergänge (View Transitions, GSAP, Vivus.js) verbessern die Nutzererfahrung.

## 5. Hauptkomponenten der Benutzeroberfläche

### 5.1. Obere Navigationsleiste (Top-Bar)
Die fixierte Leiste am oberen Rand enthält:
* **Zurück-Button (Links):** Navigiert eine Ordnerebene höher oder schließt das Modal.
* **Breadcrumb-Navigation (Mitte):** Zeigt den aktuellen Pfad an und erlaubt die direkte Navigation zu übergeordneten Ebenen.
* **Download-Button (Mitte-Rechts):**
    * **Funktion:** Ermöglicht das Herunterladen der aktuell im Browser gespeicherten Vorlagensammlung als `Templates_modified.xml`-Datei.
    * **Sichtbarkeit:** Dieser Button ist nur sichtbar, wenn eine bearbeitete Version der Vorlagen im Local Storage vorhanden ist.
* **Fullscreen-Button (Rechts):** Schaltet die Anwendung in den Vollbildmodus.
* **Theme-Toggle-Button (App-Logo, Rechts):** Wechselt zwischen Dark- und Light-Theme.

### 5.2. Karten-Container (`#cards-container`)
Der zentrale Bereich, der die Ordner- und Prompt-Karten in einem responsiven Grid-Layout anzeigt.

### 5.3. Karten (Ordner und Prompts)
* **Ordner-Karten:** Zeigen Ordner-Titel und ein Icon. Ein Klick navigiert in den Ordner.
* **Prompt-Karten:** Zeigen Prompt-Titel. Ein Klick öffnet das Detail-Modal. Buttons erlauben das direkte Kopieren oder Öffnen des Modals.

### 5.4. Prompt-Detail-Modal (`#prompt-modal`)
Ein überlagerndes Fenster zur Anzeige und Bearbeitung eines Prompts.
* **Inhalt:** Der vollständige Text des Prompts wird in einem Textfeld (`<textarea>`) angezeigt, das seine Höhe automatisch dem Inhalt anpasst, sodass immer der gesamte Text ohne internen Scrollbalken sichtbar ist. Das Scrollen geschieht am Modal selbst.
* **Aktionsbuttons im Modal (rechts unten):**
    * **"Bearbeiten"-Button:**
        * **Icon:** Stift-Symbol.
        * **Funktion:** Schaltet das Textfeld in den Bearbeitungsmodus. Die Buttons "Schließen" und "Kopieren" werden ausgeblendet, und der "Speichern"-Button wird eingeblendet.
    * **"Speichern"-Button:**
        * **Icon:** Disketten-Symbol.
        * **Funktion:** Speichert den geänderten Text. Die gesamte Vorlagenstruktur wird im Local Storage des Browsers persistiert. Danach wird der Bearbeitungsmodus beendet.
        * **Sichtbarkeit:** Nur im Bearbeitungsmodus sichtbar.
    * **"Kopieren"-Button:** Kopiert den aktuellen Text in die Zwischenablage. Nur im Lese-Modus sichtbar.
    * **"Schließen"-Button:** Schließt das Modal. Nur im Lese-Modus sichtbar.

### 5.5. Mobile Navigationsleiste & Fixierter "Zurück"-Button
Diese Elemente bieten auf mobilen Geräten bzw. Desktops alternative und schnelle Navigationsmöglichkeiten (Home, Zurück).

### 5.6. Benachrichtigungen
Visuelles Feedback (z.B. "Prompt kopiert!", "Prompt gespeichert!") erscheint nach entsprechenden Aktionen kurzzeitig oben rechts.

## 6. Kernfunktionalitäten und Interaktion

### 6.1. Initialisierung und Laden der Daten
Beim Start wird geprüft, ob eine `customTemplatesXml` im Local Storage existiert. Wenn ja, wird diese geladen. Wenn nein, wird die `Templates.xml`-Datei per `fetch` geholt.

### 6.2. Navigation
Die Navigation durch Ordner und zurück erfolgt durch Klicks, Wischgesten (mobil) und die Browser-History, die insbesondere auf mobilen Geräten für ein natives Verhalten sorgt.

### 6.3. Anzeigen von Prompt-Details
Ein Klick auf eine Prompt-Karte öffnet das Modal und zeigt den vollständigen Text im schreibgeschützten Textfeld an.

### 6.4. Bearbeiten und Speichern von Prompts
* Ein Klick auf den **"Bearbeiten"-Button** im Modal aktiviert den Bearbeitungsmodus des Textfeldes.
* Nach der Änderung des Textes speichert ein Klick auf den **"Speichern"-Button** den neuen Zustand. Technisch wird der entsprechende `beschreibung`-Attributwert im in-memory XML-Dokument aktualisiert, das gesamte Dokument wird mittels `XMLSerializer` in einen String umgewandelt und im Local Storage unter dem Schlüssel `customTemplatesXml` gespeichert.

### 6.5. Herunterladen der angepassten Vorlagen
* Der **Download-Button** in der Top-Bar (nur sichtbar nach einer Speicherung) initiiert den Download.
* Er liest den XML-String aus dem Local Storage, erzeugt daraus ein `Blob`-Objekt und triggert den Download einer Datei namens `Templates_modified.xml`.

### 6.6. Kopieren, Theme-Wechsel, Vollbildmodus
Diese Funktionen bleiben wie ursprünglich implementiert und nutzen die entsprechenden Browser-APIs (`Clipboard`, `localStorage`, `Fullscreen`).
