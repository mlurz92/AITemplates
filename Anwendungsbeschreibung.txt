# Anwendungsbeschreibung: Prompt-Template Browser (Aktueller Stand)

## 1. Einleitung

### 1.1. Zweck der Anwendung
Der Prompt-Template Browser ist eine moderne, interaktive Webanwendung, die für die effiziente Verwaltung, Navigation und Nutzung hierarchisch organisierter Textbausteine, sogenannter Prompts, konzipiert wurde. Die Anwendung lädt diese Daten aus einer lokalen XML-Datei und präsentiert sie in einer ansprechenden und intuitiven Benutzeroberfläche.

### 1.2. Zielgruppe
Die Anwendung richtet sich an alle Nutzer, die regelmäßig mit vordefinierten Textvorlagen oder Prompts arbeiten und eine schnelle, übersichtliche Methode zum Zugriff und zur Übernahme dieser Texte in andere Anwendungen oder Arbeitskontexte benötigen.

### 1.3. Kernidee und Nutzen
Die Kernidee ist die Bereitstellung einer visuell ansprechenden und benutzerfreundlichen Plattform für den Zugriff auf eine persönliche Sammlung von Prompt-Templates. Der Hauptnutzen liegt in der deutlichen Zeitersparnis und der verbesserten Organisation durch eine klare Ordnerstruktur, schnelle Navigationsmöglichkeiten und direkte Kopierfunktionen. Die Anwendung ist für den lokalen Gebrauch optimiert und legt Wert auf eine hochwertige Benutzererfahrung (UX) sowohl auf Desktop-Computern als auch auf mobilen Endgeräten.

## 2. Systemanforderungen
* Ein moderner Webbrowser mit Unterstützung für HTML5, CSS3 und aktuelle JavaScript-Versionen (ES6+), inklusive Features wie Fetch API, DOMParser, Clipboard API, Fullscreen API, History API und View Transitions API.
* Beispiele: Aktuelle Versionen von Google Chrome, Mozilla Firefox, Microsoft Edge, Apple Safari.

## 3. Datenquelle und Struktur (`Templates.xml`)

### 3.1. Aufbau und wichtige Attribute
Die gesamte inhaltliche Struktur der Anwendung (Ordner und Prompts) wird dynamisch aus einer lokalen XML-Datei namens `Templates.xml` geladen, die sich im selben Verzeichnis wie die Hauptanwendungsdatei (`index.html`) befinden muss.
Jeder Eintrag in der XML-Datei wird durch ein `<TreeViewNode>`-Element repräsentiert. Wichtige Attribute sind:
* `value="Name des Eintrags"`: Definiert den Titel, der für den Ordner oder das Prompt auf der jeweiligen Karte angezeigt wird.
* `beschreibung="Vollständiger Text des Prompts..."`: Enthält den kompletten Text des Prompts. Bei Ordner-Elementen ist dieses Attribut typischerweise leer oder wird für die Darstellung ignoriert.
* `guid="EINE-GLOBALE-EINZIGARTIGE-ID"`: Ein global eindeutiger Identifikator (GUID) für jeden Knoten (Ordner oder Prompt). Dieses Attribut ist **essenziell** für die korrekte Funktionsweise der Navigation, der Browser-History-Integration und der Zustandsverwaltung der Anwendung.

### 3.2. Bedeutung der Hierarchie
Die hierarchische Struktur der `<TreeViewNode>`-Elemente in der `Templates.xml`-Datei definiert die Ordner- und Prompt-Beziehungen:
* **Ordner:** Ein `<TreeViewNode>`, das weitere `<TreeViewNode>`-Elemente als Kinder enthält, wird in der Anwendung als klickbarer Ordner dargestellt.
* **Prompts:** Ein `<TreeViewNode>`, das keine weiteren `<TreeViewNode>`-Elemente als Kinder besitzt, wird als Prompt-Template mit zugehörigen Aktionen (Details anzeigen, Kopieren) dargestellt.

## 4. Globale UI-Konzepte und Design

### 4.1. Allgemeines Erscheinungsbild
Die Anwendung präsentiert sich in einem modernen und klaren Design, das intensiv "Glassmorphism"-Effekte (Milchglasoptik) für UI-Elemente wie Karten, die Top-Bar und das Detail-Modal nutzt. Dies erzeugt einen Eindruck von Tiefe und Transluzenz.

### 4.2. Farbgebung und Theme-Wechsel
* **Dual-Theme (Dark/Light Mode):** Die Anwendung unterstützt einen dunklen (Standard) und einen hellen Modus, um unterschiedlichen Nutzerpräferenzen und Umgebungslichtbedingungen gerecht zu werden.
    * **Dark Mode:** Verwendet eine Palette aus sehr dunklen Grautönen und Schwarz für Hintergründe, hellgrauen Text und eine warme orange-gelbe Akzentfarbe (Primär: `#ffca7a`).
    * **Light Mode:** Setzt auf helle Grau- und Weißtöne für Hintergründe, dunkelgrauen Text und eine kräftigere orange Akzentfarbe (Primär: `#c96e00`).
* **Theme-Umschaltung:** Der Wechsel zwischen den Themes erfolgt über einen dedizierten Button (App-Logo) in der oberen Navigationsleiste. Der Übergang ist sanft animiert.
* **Persistenz:** Die gewählte Theme-Präferenz wird im lokalen Speicher des Browsers gespeichert und bei zukünftigen Besuchen automatisch angewendet.
* Die `theme-color` für die Browser-UI (z.B. Adressleiste auf Mobilgeräten) passt sich dynamisch an das aktive Theme an.

### 4.3. Typografie und Lesbarkeit
Es werden System-Standard-Sans-Serif-Schriftarten genutzt, um eine optimale Lesbarkeit und ein natives Erscheinungsbild auf verschiedenen Betriebssystemen und Geräten zu gewährleisten. Schriftgrößen, Zeilenhöhen und Kontraste sind auf gute Lesbarkeit ausgelegt, insbesondere für die längeren Texte im Prompt-Detail-Modal.

### 4.4. Responsive Anpassung
Das Layout und alle interaktiven Elemente sind vollständig responsiv gestaltet. Die Darstellung passt sich fließend an verschiedene Bildschirmgrößen an, von großen Desktop-Monitoren bis hin zu kleinen Smartphone-Displays, und berücksichtigt dabei auch "Safe Areas" (z.B. Notches bei Smartphones).

### 4.5. Animationen und Übergänge
* **Karten-Animation:** Beim Scrollen werden neu in den sichtbaren Bereich gelangende Karten mit einer dezenten, gestaffelten Animation (Einblenden, leichte Verschiebung nach oben, Skalierung) eingeblendet, was durch die Intersection Observer API und GSAP (GreenSock Animation Platform) realisiert wird.
* **Seitenübergänge:** Die Navigation zwischen verschiedenen Ordnerebenen wird durch sanfte, animierte Übergänge (View Transitions API) visuell unterstützt. Diese erscheinen je nach Navigationsrichtung als Slide- oder Fade-Effekt.
* **Hover-Effekte:** Interaktive Elemente wie Karten und Buttons reagieren auf Maus-Hover mit visuellen Veränderungen (z.B. Skalierung, Farbänderung, Leuchteffekte).

## 5. Hauptkomponenten der Benutzeroberfläche

### 5.1. Top-Bar (Obere Navigationsleiste)
Die Top-Bar ist am oberen Bildschirmrand fixiert, verfügt über einen Milchglas-Hintergrund und passt ihre Polsterung an Display-Ausschnitte ("Safe Areas") an.
* **5.1.1. Zurück-Button (Top-Bar):**
    * **Icon:** Pfeil nach links.
    * **Funktion:** Ermöglicht die Navigation zur vorherigen Ordnerebene, falls man sich nicht auf der Home-Ebene befindet. Wenn das Detail-Modal geöffnet ist, schließt dieser Button primär das Modal.
    * **Sichtbarkeit:** Ist auf der obersten Ebene ("Home") ausgeblendet, wenn kein Modal geöffnet ist.
* **5.1.2. Breadcrumb-Navigation:**
    * **Anzeige:** Zeigt den aktuellen Pfad innerhalb der Ordnerhierarchie an, beginnend mit "Home" (z.B. "Home > Ordner A > Unterordner B").
    * **Interaktion:** Jede übergeordnete Ordnerebene im Pfad ist als Link klickbar und ermöglicht eine direkte Navigation zu dieser Ebene. Die aktuell angezeigte Ordnerebene ist optisch hervorgehoben und nicht klickbar.
* **5.1.3. Fullscreen-Button:**
    * **Icon:** Wechselt zwischen "Fullscreen-Enter" und "Fullscreen-Exit" Symbolen.
    * **Funktion:** Ermöglicht das Umschalten der gesamten Webanwendung in den Vollbildmodus des Browsers und zurück.
    * **Sichtbarkeit:** Wird nur angezeigt, wenn die Fullscreen-API vom Browser des Nutzers unterstützt wird.
* **5.1.4. Theme-Toggle-Button (App-Logo):**
    * **Icon:** Stellt das App-Logo dar (eine stilisierte Glühbirne/Idee). Die Farben des Logos passen sich dem aktiven Theme an.
    * **Funktion:** Ein Klick auf diesen Button schaltet zwischen dem Dark- und Light-Theme der Anwendung um.

### 5.2. Karten-Container
Der zentrale Bereich der Anwendung, der die Ordner- und Prompt-Karten anzeigt.
* **5.2.1. Layout:**
    * **Desktop:** Karten werden in einem responsiven Grid-Layout dargestellt. Die Anzahl der Spalten passt sich automatisch an die verfügbare Bildschirmbreite an.
    * **Mobil:** Karten werden typischerweise in einem zweispaltigen Layout angezeigt.
* **5.2.2. Interaktion: Klick auf freie Fläche:**
    * Ein Klick auf eine leere Fläche innerhalb des Karten-Containers (d.h. nicht auf eine Karte oder ein interaktives Element einer Karte) navigiert eine Ordnerebene zurück (zur übergeordneten Ebene).
    * Dies gilt nicht, wenn man sich bereits auf der obersten Ebene ("Home") befindet oder das Detail-Modal geöffnet ist.
    * Auf mobilen Geräten wird bei dieser Aktion der Browser-Verlauf mittels `history.pushState` aktualisiert, um den Zustand der übergeordneten Ebene korrekt widerzuspiegeln.

### 5.3. Karten (Ordner und Prompts)
Alle Karten (sowohl Ordner als auch Prompts) teilen ein Basisdesign mit abgerundeten Ecken, einem Milchglas-Hintergrund, einem dezenten Rand und einem leichten Schattenwurf. Diese Elemente passen sich dem aktiven Theme an.
* **5.3.1. Allgemeines Design und Hover-Effekte:**
    * Beim Überfahren einer Karte mit der Maus (Desktop) neigt sich die Karte leicht im 3D-Raum, wird subtil vergrößert und der Rand erhält einen pulsierenden Leuchteffekt (Glow). Die Neigung der Karte reagiert interaktiv auf die Mausposition über der Karte.
* **5.3.2. Einheitliche Kartenhöhe:**
    * Innerhalb einer aktuell angezeigten Ordnerebene wird die Höhe aller dargestellten Karten dynamisch vereinheitlicht. Die maximale Höhe aller sichtbaren Ordner-Karten dient als Referenz für alle Karten in dieser Ansicht, wobei eine Mindesthöhe von 180px gilt. Sind keine Ordner-Karten vorhanden, beträgt die Höhe der Prompt-Karten standardmäßig 180px. Die Anpassung erfolgt mit einer sanften CSS-Transition.
* **5.3.3. Ordner-Karten (`.folder-card`):**
    * **Anzeige:** Zeigen zentriert den Titel des Ordners (Attribut `value` aus XML) und ein großes, stilisiertes Ordner-SVG-Icon.
    * **Icon-Animation:** Das SVG-Icon des Ordners wird beim ersten Berühren auf Touch-Geräten oder beim Überfahren mit der Maus auf Desktop-Geräten mit einem "Live-Drawing"-Effekt (mittels Vivus.js) animiert. Die Strichfarbe des Icons entspricht der Textfarbe des aktiven Themes.
    * **Interaktion:** Ein Klick auf eine Ordner-Karte navigiert in diesen Ordner und zeigt dessen Inhalt an.
* **5.3.4. Prompt-Karten (`.prompt-card`):**
    * **Anzeige:** Zeigen zentriert den Titel des Prompts (Attribut `value` aus XML, max. 3 Zeilen). Eine Textvorschau des Prompts wird nicht mehr direkt auf der Karte angezeigt.
    * **Aktionsbuttons:** Unterhalb des Titels befinden sich zwei Buttons mit Icons:
        * **"Details anzeigen" (Icon: Pfeil nach unten):** Öffnet das Prompt-Detail-Modal mit dem vollständigen Text des Prompts.
        * **"Prompt kopieren" (Icon: Kopiersymbol):** Kopiert den vollständigen Text des Prompts (Attribut `beschreibung` aus XML) direkt in die Zwischenablage des Nutzers.
    * **Interaktion:** Ein Klick auf die Prompt-Karte selbst (außerhalb der Buttons) öffnet ebenfalls das Detail-Modal.

### 5.4. Prompt-Detail-Modal
Ein überlagerndes Fenster (Modal), das den vollständigen Inhalt eines ausgewählten Prompts darstellt.
* **5.4.1. Aufruf und Erscheinungsbild:**
    * Wird durch Klick auf den "Details anzeigen"-Button einer Prompt-Karte oder durch Klick auf die Prompt-Karte selbst geöffnet.
    * Bei Öffnung wird der Hintergrund der Hauptanwendung abgedunkelt und mit einem Unschärfeeffekt versehen. Das Modal-Fenster erscheint zentriert, hat einen Milchglas-Hintergrund, abgerundete Ecken und einen Schatten.
* **5.4.2. Inhalt und Scroll-Verhalten:**
    * Zeigt den vollständigen, unformatierten Text des Prompts (Attribut `beschreibung` aus XML).
    * Der Textbereich innerhalb des Modals ist bei Bedarf vertikal scrollbar, falls der Inhalt die maximale Höhe des Modals übersteigt.
* **5.4.3. Aktionsbuttons im Modal:**
    * **"Schließen" (Icon: Pfeil nach oben):** Schließt das Detail-Modal.
    * **"Prompt kopieren" (Icon: Kopiersymbol):** Kopiert den im Modal angezeigten vollständigen Prompt-Text in die Zwischenablage.
* **5.4.4. Schließen des Modals:**
    * Neben dem "Schließen"-Button kann das Modal auch durch einen Klick auf den abgedunkelten Hintergrundbereich außerhalb des Modal-Inhaltsfensters geschlossen werden. Auf mobilen Geräten schließt auch der mobile Zurück-Button (siehe 5.5.2) oder der Zurück-Button in der Top-Bar (siehe 5.1.1) das Modal, falls es geöffnet ist.

### 5.5. Mobile Navigationsleiste (Untere Leiste) - *Nur auf mobilen Geräten*
Diese Navigationsleiste ist ausschließlich auf mobilen Geräten sichtbar und am unteren Bildschirmrand fixiert. Sie verfügt über einen Milchglas-Hintergrund und berücksichtigt "Safe Areas".
* **5.5.1. Home-Button (Mobile):**
    * **Icon:** Haus-Symbol.
    * **Funktion:** Navigiert den Nutzer immer direkt zur obersten Ebene ("Home") der Hierarchie. Wenn das Detail-Modal geöffnet ist, wird dieses zuerst geschlossen (ohne einen `history.back()`-Effekt, stattdessen wird der Modal-Zustand in der History ersetzt), und anschließend erfolgt die Navigation zur Home-Ansicht. Der Browser-Verlauf wird dabei so aktualisiert, dass der Home-Zustand aktiv ist.
* **5.5.2. Zurück-Button (Mobile):**
    * **Icon:** Pfeil nach links.
    * **Funktion:**
        * Wenn das Detail-Modal geöffnet ist: Schließt **nur** das Modal. Dies geschieht analog zum Klick auf den Modal-Hintergrund (der Modal-Zustand in der History wird ersetzt, kein `history.back()`).
        * Wenn kein Modal geöffnet ist und man sich nicht auf der Home-Ebene befindet: Navigiert eine Ordnerebene höher. Der Browser-Verlauf wird mittels `history.pushState` aktualisiert, um den Zustand der übergeordneten Ebene korrekt widerzuspiegeln.
    * **Sichtbarkeit:** Ist ausgeblendet, wenn man sich auf der Home-Ebene befindet und kein Modal geöffnet ist.

### 5.6. Fixierter "Zurück zur Home"-Button - *Nur auf Desktop/Tablets*
Auf Geräten, die nicht als mobil eingestuft werden (typischerweise Desktop-Computer und größere Tablets, auf denen die untere mobile Navigationsleiste nicht angezeigt wird), erscheint ein runder, fixierter Button am linken Bildschirmrand, vertikal zentriert.
* **Icon:** Pfeil nach links.
* **Funktion:** Ermöglicht eine schnelle Rückkehr zur obersten Ebene ("Home") der Anwendung. Schließt ebenfalls ein eventuell geöffnetes Detail-Modal, bevor zur Home-Ansicht navigiert wird.
* **Sichtbarkeit:** Ist ausgeblendet, wenn sich der Nutzer bereits auf der Home-Ebene befindet und kein Modal geöffnet ist.

### 5.7. Benachrichtigungen
Nach einem erfolgreichen Kopiervorgang eines Prompt-Textes erscheint kurzzeitig eine Bestätigungs-Benachrichtigung oben rechts auf dem Bildschirm.
* **Aussehen:** Kleines Panel mit Milchglas-Hintergrund, abgerundeten Ecken und Textfarbe entsprechend dem Theme.
* **Inhalt:** Zeigt die Meldung "Prompt kopiert!" zusammen mit einem farblich passenden Haken-Icon (Erfolgsfall) oder eine Fehlermeldung (Fehlerfall).
* Die Benachrichtigung blendet sich nach einigen Sekunden automatisch wieder aus.

## 6. Kernfunktionalitäten und Interaktion

### 6.1. Start der Anwendung und Laden der Daten
Beim ersten Laden der `index.html` initialisiert sich die Anwendung. Das Theme wird basierend auf der lokalen Speicherung oder Standard (Dark Mode) gesetzt. Die `Templates.xml` wird asynchron geladen und geparst. Anschließend wird die oberste Ebene (Home) der Hierarchie im Karten-Container dargestellt.

### 6.2. Navigation durch die Hierarchie
* **6.2.1. Öffnen von Ordnern:** Ein Klick auf eine Ordner-Karte führt zum Laden und Anzeigen des Inhalts dieses Ordners. Der Breadcrumb-Pfad wird entsprechend aktualisiert.
* **6.2.2. Zurück-Navigation:**
    * **Top-Bar Zurück-Button:** Navigiert eine Ebene höher oder schließt das Modal.
    * **Mobile Navigationsleiste Zurück-Button:**
        * Modal offen: Schließt nur das Modal (History wird durch `replaceState` für den Modal-Schließvorgang angepasst).
        * Modal geschlossen: Navigiert eine Ebene höher (History wird durch `pushState` auf den Eltern-Zustand gesetzt).
    * **Klick auf freie Fläche im Karten-Container:** (Wenn kein Modal offen) Navigiert eine Ebene höher (History wird auf mobilen Geräten durch `pushState` auf den Eltern-Zustand gesetzt).
    * **Wischgeste (Mobile):** Eine Wischgeste von links nach rechts über den Karten-Container navigiert eine Ebene höher (löst `MapsHistory('backward')` aus, was bei mobilen Geräten `window.history.back()` nutzt und somit `handlePopState` zur Zustandsherstellung).
    * **Browser Zurück-Button:** Die native Zurück-Funktion des Browsers wird durch die Integration mit der History API unterstützt und stellt den vorherigen Anwendungszustand (Pfad, Modalstatus) wieder her.
* **6.2.3. Navigation über Breadcrumbs:** Ein Klick auf einen Eintrag im Breadcrumb-Pfad (außer dem aktiven) navigiert direkt zu der entsprechenden übergeordneten Ebene.
* **6.2.4. Direkte Navigation zu "Home":**
    * **Home-Link im Breadcrumb.**
    * **Mobile Navigationsleiste Home-Button:** Schließt ggf. das Modal (History-Anpassung via `replaceState` für Modal) und navigiert dann zur Home-Ansicht (History-Anpassung via `pushState` für Home).
    * **Fixierter "Zurück zur Home"-Button (Desktop/Tablet):** Schließt ggf. das Modal und navigiert zur Home-Ansicht.

### 6.3. Anzeigen von Prompt-Details
Ein Klick auf eine Prompt-Karte oder deren "Details anzeigen"-Button öffnet das Detail-Modal, in dem der vollständige Text des Prompts lesbar dargestellt wird. Der Zustand (welcher Prompt im Modal ist) wird in der Browser-History für mobile Geräte vermerkt.

### 6.4. Kopieren von Prompt-Texten
Der Kopiervorgang (von der Karte oder aus dem Modal) nutzt die Clipboard API des Browsers (wenn verfügbar und im sicheren Kontext) oder einen Fallback-Mechanismus mit einem temporären Textarea-Element. Eine Erfolgs- oder Fehlermeldung wird angezeigt.

### 6.5. Theme-Wechsel
Der Theme-Wechsel über das App-Logo in der Top-Bar ist jederzeit möglich und die Einstellung bleibt über Sitzungen hinweg erhalten.

### 6.6. Vollbildmodus
Der Vollbildmodus kann über den entsprechenden Button in der Top-Bar aktiviert und deaktiviert werden, um eine ablenkungsfreie Ansicht zu ermöglichen.

### 6.7. Mobile-spezifische Interaktionen
* **6.7.1. Wischgeste zum Zurücknavigieren:** Wie unter 6.2.2 beschrieben, ermöglicht ein Rechtswisch auf dem Karten-Container eine intuitive Zurück-Navigation.
* **6.7.2. Browser-History-Integration:** Die Anwendung manipuliert die Browser-History (`pushState`, `replaceState`, `onpopstate`), um eine kohärente Navigation mit den physischen/OS-eigenen Zurück- und Vorwärts-Buttons zu ermöglichen.
    * Das Öffnen von Ordnern und das Navigieren zu einer Ebene höher durch Klick auf freie Flächen oder den mobilen Zurück-Button (ohne offenes Modal) verwendet `pushState`, um einen neuen Verlaufseintrag für die erreichte Ansicht zu erstellen.
    * Das Schließen des Modals durch Klick auf den Backdrop oder durch die dedizierten mobilen Buttons (Zurück/Home) verwendet `replaceState`, um den "Modal offen"-Zustand im Verlauf durch einen "Modal geschlossen"-Zustand auf derselben Ordnerebene zu ersetzen, wodurch keine zusätzlichen Navigationsschritte für das reine Schließen des Modals im Verlauf entstehen.
    * Das Öffnen eines Modals führt ebenfalls zu einem `pushState`, um den Zustand "Modal offen mit spezifischem Prompt" im Verlauf festzuhalten.

## 7. Progressive Web App (PWA) Funktionalität
Die Anwendung ist als Progressive Web App konzipiert:
* **Web App Manifest (`manifest.json`):** Ermöglicht es Nutzern, die Anwendung auf unterstützten mobilen Browsern "Zum Startbildschirm hinzuzufügen".
* **App-ähnliches Erlebnis:** Beim Start über das Homescreen-Icon öffnet sich die Anwendung in einem eigenständigen Fenster ohne die übliche Browser-Adressleiste und nutzt die im Manifest definierten Icons und Theme-Farben.
